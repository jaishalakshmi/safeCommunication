/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Infrastructure;

import InternetSecurity.SafeClient;
import LocalSecurity.Client;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import javax.swing.ImageIcon;
import javax.swing.JFrame;



/**
 *
 * @author axis
 */
public class EndUserGUI extends javax.swing.JFrame {
    boolean connected = false;
    boolean streaming = false;
    SafeClient homeClient;
    byte[] imageBytes = null;
    Runnable streamRunnable;
    Thread stremThread;

    /**
     * Creates new form ClientGUI
     */
    public EndUserGUI() {
        this.initComponents();
        this.jSpinnerFps.setValue(1);
        this.jSpinnerWidth.setValue(320);
        this.jSpinnerHeight.setValue(240);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSettings = new javax.swing.JPanel();
        jLabelWidth = new javax.swing.JLabel();
        jLabelHeight = new javax.swing.JLabel();
        jLabelFps = new javax.swing.JLabel();
        jLabelIP = new javax.swing.JLabel();
        jLabelPort = new javax.swing.JLabel();
        jButtonDisconnect = new javax.swing.JButton();
        jSpinnerWidth = new javax.swing.JSpinner();
        jSpinnerHeight = new javax.swing.JSpinner();
        jSpinnerFps = new javax.swing.JSpinner();
        jTextFieldIP = new javax.swing.JTextField();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonConnnect = new javax.swing.JButton();
        jPanelPicture = new javax.swing.JPanel();
        jLabelPicture = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelSettings.setLayout(new java.awt.GridLayout(2, 6));

        jLabelWidth.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelWidth.setText("Width:");
        jLabelWidth.setToolTipText("");
        jPanelSettings.add(jLabelWidth);

        jLabelHeight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelHeight.setText("Height:");
        jPanelSettings.add(jLabelHeight);

        jLabelFps.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelFps.setText("Fps");
        jPanelSettings.add(jLabelFps);

        jLabelIP.setText("IP");
        jPanelSettings.add(jLabelIP);

        jLabelPort.setText("Port");
        jPanelSettings.add(jLabelPort);

        jButtonDisconnect.setText("Dissconnect");
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });
        jPanelSettings.add(jButtonDisconnect);
        jPanelSettings.add(jSpinnerWidth);
        jPanelSettings.add(jSpinnerHeight);
        jPanelSettings.add(jSpinnerFps);

        jTextFieldIP.setText("83.254.132.115");
        jTextFieldIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIPActionPerformed(evt);
            }
        });
        jPanelSettings.add(jTextFieldIP);

        jTextFieldPort.setText("10800");
        jPanelSettings.add(jTextFieldPort);

        jButtonConnnect.setText("Connect");
        jButtonConnnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnnectActionPerformed(evt);
            }
        });
        jPanelSettings.add(jButtonConnnect);

        getContentPane().add(jPanelSettings, java.awt.BorderLayout.PAGE_START);

        jLabelPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPicture.setToolTipText("");

        javax.swing.GroupLayout jPanelPictureLayout = new javax.swing.GroupLayout(jPanelPicture);
        jPanelPicture.setLayout(jPanelPictureLayout);
        jPanelPictureLayout.setHorizontalGroup(
            jPanelPictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        jPanelPictureLayout.setVerticalGroup(
            jPanelPictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPictureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanelPicture, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnnectActionPerformed
        if(!connected){
            System.out.println("TRYING TO CONNECT");
            
            AboutServer ca = new AboutServer("CA1","127.0.0.1", 10040);
            AboutServer home = new AboutServer(null,"127.0.0.1", 10041);
            this.homeClient = new SafeClient("ClientJanez",home,ca);
            
            if(this.homeClient.isConnected()){
                this.connected = true;
                //imageStream();
            }else{
                System.out.println("Can not connect to HOME server");
                connected = false;
            }
        }
        System.out.println("");

    }//GEN-LAST:event_jButtonConnnectActionPerformed
    private void imageStream(){
        //send command first
        this.homeClient.writeEncString("stream");
        
        String ipAddress = jTextFieldIP.getText();
        int portNumber = Integer.parseInt(jTextFieldPort.getText());
        
        this.homeClient.writeEncString(ipAddress);
        this.homeClient.writeEncInt(portNumber);
        
        String response = this.homeClient.readEncString();
        if(!response.equals("Cammera connected")){
            System.out.println(response);
        }
        
        int width = (int)jSpinnerWidth.getValue();
        int height = (int)jSpinnerHeight.getValue();
        int fps = (int)jSpinnerFps.getValue();
        
        this.homeClient.writeEncInt(width);
        this.homeClient.writeEncInt(height);
        this.homeClient.writeEncInt(fps);
        
        this.streamRunnable=new Streamer(this); //init Runnable, and pass arg to thread 1 by constructor
        this.stremThread=new Thread(streamRunnable);
        this.stremThread.start();
    }
    
    private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectActionPerformed
        if(connected){
            connected = false;
            this.jLabelPicture.setIcon(null);
            
            try {
                while(this.streaming)
                    Thread.sleep(100);
                this.homeClient.writeEncString("disconnect");
                String response = this.homeClient.readEncString();
                System.out.println(response);
                
            } catch (Exception e) {
                System.out.println("Disconnection error");
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonDisconnectActionPerformed

    private void jTextFieldIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIPActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EndUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EndUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EndUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EndUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EndUserGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JLabel jLabelFps;
    private javax.swing.JLabel jLabelHeight;
    private javax.swing.JLabel jLabelIP;
    private javax.swing.JLabel jLabelPicture;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelWidth;
    private javax.swing.JPanel jPanelPicture;
    private javax.swing.JPanel jPanelSettings;
    private javax.swing.JSpinner jSpinnerFps;
    private javax.swing.JSpinner jSpinnerHeight;
    private javax.swing.JSpinner jSpinnerWidth;
    private javax.swing.JTextField jTextFieldIP;
    private javax.swing.JTextField jTextFieldPort;
    // End of variables declaration//GEN-END:variables
    
    
    
    class Streamer implements Runnable{
        private EndUserGUI gui;
        public Streamer(EndUserGUI gui){
            this.gui=gui;
        }

        @Override
        public void run() {
            try {
                gui.streaming = true;
                while(gui.connected){
                    gui.homeClient.writeEncString("continue");
                    gui.imageBytes =  gui.homeClient.readEnc();
                    gui.jLabelPicture.setIcon(new ImageIcon(gui.imageBytes));
                }
                gui.homeClient.writeEncString("end");
                System.out.println("closing stream");
                gui.streaming = false;
                gui.jLabelPicture.setIcon(null);
            } catch (Exception e) {
                System.out.println("Can't read image stream");
                System.out.println(e.getMessage());
            }
            
        }
    }
}
